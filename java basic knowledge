int lo = 0, hi = numbers.length - 1; 数组对撞指针
return new int[]{lo + 1, hi + 1}; 原地建数组

1. 数据结构总结：

1）List : Arraylist, vector, LinkedList

2）ArrayList and Array:
可以将ArrayList想象成一种“会自动扩增容量的Array”。 
Array（[]）：最高效；但是其容量固定且无法动态改变； 
ArrayList：  容量可动态增长；但牺牲效率, 在不需要频繁删除时使用

3)List and ArrayList:
List是一个接口，而ArrayList是List接口的一个实现类。 
ArrayList类继承并实现了List接口。

4)LinkedList:链表(队列)，在需要频繁删除、插入时使用

String:
String s="xxxx";
char[]ch=s.toCharArray();
s.subString(i,j);//截取下标从i到j-1;
String[]ss=s.split("分割的字符串或者正则表达式");
int index1 = s.indexOf('i');//返回指定字符在此字符串中第一次出现处的索引


Map:
Map<String,String> map = new HashMap<>();
map.put("key","value");
map.getOrDefault("key","default");//if(map.containsKey("key")) return "value" else return "default"
map.get("key"); 
map.containsKey("key");//是否包含指定key；
遍历：
for(Map.Entry<String,String> entry : map.entrySet()){
    entry.getKey();
    entry.getValue();
} 
for (Integer key : map.keySet()) {
    Integer value = map.get(key);
    System.out.println("Key = " + key + ", Value = " + value);
  }


队列：
Queue<String> queue = new LinkedList<String>();
queue.offer("a");  //  添加一个元素并返回true 
queue.poll();  // get and pop the first element
queue.peek(); // 返回队头元素 
queue.isEmpty();// 判空 返回bollean


链表：
LinkedList<String> list=new LinkedList<String>();
//用list.isEmpty()判空
        System.out.println(list.isEmpty());
//用add插入元素 默认尾插
        list.add("1");
        list.add("2");
        list.add(0,"3");//头插
        list.add(1,"4");//某位置插
        list.add(list.size(),"5");//尾插
//用remove删除某位置元素
        list.remove(0);
//list.size()返回链表长度
        System.out.println(list.size());
//获取0位置的元素值
        System.out.println(list.get(0));
//获取最后位置的元素值
        System.out.println(list.get(list.size()-1));//获取最后一个位置的元素值


栈:
Stack<TreeNode> stack = new Stack<TreeNode>();
stack.push(root);//进栈
stack.pop();//出栈
stack.peek(); // 查看最后一个元素，但不删除
stack.empty(); // 判空 返回bollean
遍历：
for (Integer x : s) { System.out.println(x); }



2. 基本语法：

1）输入输出：
Scanner in=new Scann(System.in);
int n=in.nextInt();//读取单个字符；
String s=in.nextLine();//读取整行输入；

2）


类型转换：
int2String
int i = 9;
String j = String.valueOf(i);

String2int
int dot = Integer.valueOf(str);

String2double
double dot = Double.parseDouble(str);
double dot = Double.valueOf(str);

String 转 String数组
String Str = "您好/你们好/早上好/下午好";
String[]  ss = wordString.split("/");

数组 Array转String
double[] arr = {1,2,3,4};// float[]  int[]  如是。
String str = Arrays.toString(arr);

动态数组与静态数组
静态数组：Double[] douArray = new Double[20];
动态数组：
Double[] douArray;
douArray = new Double[**.length];


3）





4)

length,length(),size() 的使用与区别：
length属性是==针对数组==说的，比如说你声明了一个数组，想知道这个数组的长度则用到了length这个属性。
length()方法是==针对字符串String==说的，如果想看这个字符串的长度则用到length()这个方法。
size()方法是==针对泛型集合泛型集合(Collection)如Set、List、Map==说的，如果想看这个泛型有多少个元素，就调用此方法来查看。数组没有size()方法。



int 和 Integer的区别：
int 是基本类型，直接存数值，而integer是对象，用一个引用指向这个对象
1.int是基本的数据类型；
2.Integer是int的封装类；
3.int和Integer都可以表示某一个数值；
4.int和Integer不能够互用，因为他们两种不同的数据类型；
ArrayList al=new ArrayList();
　　int n=40;
　　Integer nI=new Integer(n);
　　al.add(n);//不可以
　　al.add(nI);//可以


  

快排：
Arrays.sort(arrayToSort);
    System.out.println("排序后");
    for (int i = 0; i < arrayToSort.length; i++)
        System.out.println(arrayToSort[i]);
